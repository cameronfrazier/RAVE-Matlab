function [ force, moment ] = pf_get_forces_obs( ap, scan, shift )
%PF_GET_FORCES_OBS Calculate forces and moments generated by obstacles in
%rover CS
    
    if ~ap.obs_use
        force = [0 0 0]';
        moment = [0 0 0]';
        return;
    end

    % setup some constants
    cnt_shift   = length( shift(:,1) );
    
    f_shift = zeros(cnt_shift,3);
    m_shift = zeros(cnt_shift,3);
    
    % make sure we only look at the part of the scan we need
    scan = scan(scan(:,2)<=ap.laser.angle_max,:);
    scan = scan(scan(:,2)>=ap.laser.angle_min,:);
    
    for i = 1:cnt_shift
        % apply shift if needed
        ss  = pf_shift_scan( scan, shift(i,:) );
        
        % C++ : magF = obsGainK * tmp.arc * std::max( pow( range - critDist, critDist), 1-obsPower );
        
        % calculate forces
        %f   =  f_coeff * ( ss(:,1) - crit_dist ) .^ ( 1 - obs_pwr );
        ranges = max(ss(:,1) - ap.distance_critical, ap.distance_critical);
        %f = -ap.obs_gain * ap.laser.resolution * ranges .^ (1-ap.obs_power);
        f = -ap.obs_gain * ap.laser.resolution * ranges .^ (1-ap.obs_power);
        f   = [ f.*cos( ss(:,2) ) , f.*sin( ss(:,2) ) ];
                
        % load output variables
        f_shift(i,:)    = [ sum(f,1) 0];
        m_shift(i,:)    = shift(i,1)*f_shift(i,2) - shift(i,2)*f_shift(i,1);
    end
    
    force   = sum( f_shift, 1 )' / cnt_shift;
    moment  = sum( m_shift, 1 )' / cnt_shift;
end

